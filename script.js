// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–∞–π–ø–æ–º –≤ Telegram Mini Apps
if (window.Telegram?.WebApp?.preventClose) {
  window.Telegram.WebApp.preventClose();
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–≤–∞–π–ø–æ–≤ (–¥–ª—è Telegram 7.7+)
if (window.Telegram?.WebApp?.disableVerticalSwipes) {
  window.Telegram.WebApp.disableVerticalSwipes();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let elements = {};
let financeData = {};
let budgetData = {
  totalAmount: 0,
  days: 0,
  startDate: null,
  spent: 0,
  dailyHistory: {}
};
let savingsWidgets = [];
let fundWidgets = [];
let achievementsData = {};
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
let hasUnsavedChanges = false;
let saveTimeout = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
let chart, capitalChart, miniCapitalChart, miniExpenseChart;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categoryColors = [
  '#e74c3c', '#3498db', '#2ecc71', '#f39c12', 
  '#9b59b6', '#1abc9c', '#d35400', '#34495e',
  '#16a085', '#27ae60', '#2980b9', '#8e44ad',
  '#f1c40f', '#e67e22', '#c0392b'
];

// –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
const monthNames = [
  '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', 
  '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', 
  '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
let themeToggleCount = 0;
let lastThemeToggleTime = 0;
let pullAttempts = 0;
let monthSequence = [];
let widgetClickCount = 0;
const requiredMonthSequence = [8, 9, 10, 11, 0, 1]; // –°–µ–Ω—Ç—è–±—Ä—å-–§–µ–≤—Ä–∞–ª—å

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = [
  {
    id: 'better_than_most',
    title: "–õ—É—á—à–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞",
    description: "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –µ—ë —Å—Ä–∞–∑—É",
    emoji: "üèÜ",
    secret: false,
    check: () => true
  },
  {
    id: 'basic_minimum',
    title: '–ë–∞–∑–æ–≤—ã–π –º–∏–Ω–∏–º—É–º',
    description: '–î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü > 300 000 ‚ÇΩ',
    emoji: 'üí∞',
    secret: false,
    check: (data) => data.income > 300000
  },
  {
    id: 'beer_category',
    title: '–Ø –±–µ—Ä—É –ø–∞—Ä–µ –±–∞–± –ø–æ –ø–∞—Ä–µ –±–∞–Ω–æ–∫ Bud',
    description: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ü–∏–≤–æ¬ª',
    emoji: 'üç∫',
    secret: false,
    check: (data) => Object.keys(data.categories).includes('–ü–∏–≤–æ')
  },
  {
    id: 'psychologist_category',
    title: '–ú–Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç',
    description: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ü—Å–∏—Ö–æ–ª–æ–≥¬ª',
    emoji: 'üß†',
    secret: false,
    check: (data) => Object.keys(data.categories).includes('–ü—Å–∏—Ö–æ–ª–æ–≥')
  },
  {
    id: 'food_category',
    title: '–ß—Ç–æ –Ω–∞ —É–∂–∏–Ω?',
    description: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ï–¥–∞¬ª',
    emoji: 'üçï',
    secret: false,
    check: (data) => Object.keys(data.categories).includes('–ï–¥–∞')
  },
  {
    id: 'ghost_busters',
    title: "Ghost busters",
    description: "5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É",
    emoji: "üëª",
    secret: true,
    check: () => false
  },
  {
    id: 'dungeons_and_dragons',
    title: "–ü–æ–¥–∑–µ–º–µ–ª—å–µ –∏ –¥—Ä–∞–∫–æ–Ω—ã",
    description: "–ü–æ—Ç—è–Ω—É—Ç—å –≤–Ω–∏–∑ –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –Ω–µ –ª–∏—Å—Ç–∞–µ—Ç—Å—è",
    emoji: "üêâ",
    secret: true,
    check: () => false
  },
  {
    id: 'do_re_mi',
    title: "–î–æ —Ä–µ –º–∏ —Ñ–∞ —Å–æ–ª—å –ª—è —Å–∏",
    description: "–û—Ç–∫—Ä—ã—Ç—å –º–µ—Å—è—Ü—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: —Å–µ–Ω—Ç—è–±—Ä—å, –æ–∫—Ç—è–±—Ä—å, –Ω–æ—è–±—Ä—å, –¥–µ–∫–∞–±—Ä—å, —è–Ω–≤–∞—Ä—å, —Ñ–µ–≤—Ä–∞–ª—å",
    emoji: "üéµ",
    secret: true,
    check: () => false
  }
];

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

function formatCurrency(amount) {
  return new Intl.NumberFormat('ru-RU').format(amount) + ' ‚ÇΩ';
}

function showSuccessMessage(message) {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: #2ecc71;
    color: white;
    padding: 12px 24px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    z-index: 10000;
    font-weight: 600;
  `;
  notification.textContent = message;
  document.body.appendChild(notification);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    notification.style.opacity = '1';
    notification.style.transform = 'translateX(-50%) translateY(0)';
  }, 100);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(-50%) translateY(-20px)';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 3000);
}

function markDataChanged() {
  hasUnsavedChanges = true;
  if (saveTimeout) clearTimeout(saveTimeout);
  saveTimeout = setTimeout(saveData, 2000);
}

// ==================== –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò ====================

function loadData() {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    const financeDataStr = localStorage.getItem('financeData');
    const budgetDataStr = localStorage.getItem('budgetData');
    const savingsWidgetsStr = localStorage.getItem('savingsWidgets');
    const fundWidgetsStr = localStorage.getItem('fundWidgets');
    const achievementsDataStr = localStorage.getItem('achievementsData');
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    financeData = financeDataStr ? JSON.parse(financeDataStr) : {};
    budgetData = budgetDataStr ? JSON.parse(budgetDataStr) : {
      totalAmount: 0,
      days: 0,
      startDate: null,
      spent: 0,
      dailyHistory: {}
    };
    savingsWidgets = savingsWidgetsStr ? JSON.parse(savingsWidgetsStr) : [];
    fundWidgets = fundWidgetsStr ? JSON.parse(fundWidgetsStr) : [];
    achievementsData = achievementsDataStr ? JSON.parse(achievementsDataStr) : {};
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–¥–∞ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if (!financeData[currentYear]) {
      initYearData(currentYear);
    }
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    initializeEmptyData();
  }
}

function saveData() {
  try {
    localStorage.setItem('financeData', JSON.stringify(financeData));
    localStorage.setItem('budgetData', JSON.stringify(budgetData));
    localStorage.setItem('savingsWidgets', JSON.stringify(savingsWidgets));
    localStorage.setItem('fundWidgets', JSON.stringify(fundWidgets));
    localStorage.setItem('achievementsData', JSON.stringify(achievementsData));
    
    hasUnsavedChanges = false;
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    return false;
  }
}

function initializeEmptyData() {
  financeData = {};
  budgetData = {
    totalAmount: 0,
    days: 0,
    startDate: null,
    spent: 0,
    dailyHistory: {}
  };
  savingsWidgets = [];
  fundWidgets = [];
  achievementsData = {};
  
  initYearData(currentYear);
}

function initYearData(year) {
  if (!financeData[year]) {
    financeData[year] = {};
    for (let i = 0; i < 12; i++) {
      financeData[year][i] = {
        income: 0,
        expense: 0,
        categories: {},
        capital: 0,
        expensesHistory: []
      };
    }
  }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í DOM ====================

function initializeDOMElements() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM...');
  
  elements = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–≤–æ–¥–∞
    incomeInput: document.getElementById('income-input'),
    addIncomeBtn: document.getElementById('add-income-btn'),
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    incomeDisplay: document.getElementById('income'),
    expenseDisplay: document.getElementById('expense'),
    percentDisplay: document.getElementById('percent'),
    capitalDisplay: document.getElementById('capital-display'),
    currentYearDisplay: document.getElementById('current-year-display'),
    
    // –ö–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
    categoryBtn: document.getElementById('category-btn'),
    capitalizationBtn: document.getElementById('capitalization-btn'),
    settingsBtn: document.getElementById('settings-btn'),
    themeToggleBtn: document.getElementById('theme-toggle-btn'),
    moreBtn: document.getElementById('more-btn'),
    
    // –ú–µ–Ω—é –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    categoryMenu: document.getElementById('category-menu'),
    capitalizationMenu: document.getElementById('capitalization-menu'),
    settingsMenu: document.getElementById('settings-menu'),
    moreMenu: document.getElementById('more-menu'),
    savingsModal: document.getElementById('savings-modal'),
    fundModal: document.getElementById('fund-modal'),
    historyModal: document.getElementById('history-modal'),
    achievementsModal: document.getElementById('achievements-modal'),
    yearSelectModal: document.getElementById('year-select-modal'),
    transferDataModal: document.getElementById('transfer-data-modal'),
    setBudgetModal: document.getElementById('set-budget-modal'),
    
    // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    closeCategoryWidget: document.getElementById('close-category-widget'),
    closeReportsBtn: document.getElementById('close-reports-btn'),
    closeHistory: document.getElementById('close-history'),
    closeAchievements: document.getElementById('close-achievements'),
    closeYearSelect: document.getElementById('close-year-select'),
    closeTransferData: document.getElementById('close-transfer-data'),
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    newCategoryInput: document.getElementById('new-category-input'),
    addCategoryBtn: document.getElementById('add-category-btn'),
    categoriesList: document.getElementById('categories-list'),
    
    // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    capitalInput: document.getElementById('capital-input'),
    saveCapitalBtn: document.getElementById('save-capital-btn'),
    cancelCapitalBtn: document.getElementById('cancel-capital-btn'),
    
    // –ë—é–¥–∂–µ—Ç
    budgetSettingsBtn: document.getElementById('budget-settings-btn'),
    dailyBudgetAmount: document.getElementById('daily-budget-amount'),
    budgetProgress: document.getElementById('budget-progress'),
    budgetAmount: document.getElementById('budget-amount'),
    budgetDays: document.getElementById('budget-days'),
    saveBudgetBtn: document.getElementById('save-budget-btn'),
    cancelBudgetBtn: document.getElementById('cancel-budget-btn'),
    daysProgressBar: document.querySelector('.days-progress'),
    fundsProgressBar: document.querySelector('.funds-progress'),
    daysProgressValue: document.getElementById('days-progress-value'),
    fundsProgressValue: document.getElementById('funds-progress-value'),
    
    // –í–∏–¥–∂–µ—Ç—ã
    widgetsContainer: document.getElementById('widgets'),
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    enableSavingsBtn: document.getElementById('enable-savings-btn'),
    enableFundBtn: document.getElementById('enable-fund-btn'),
    yearSelectBtn: document.getElementById('year-select-btn'),
    historyBtn: document.getElementById('history-btn'),
    achievementsBtn: document.getElementById('achievements-btn'),
    transferDataBtn: document.getElementById('transfer-data-btn'),
    resetBtn: document.getElementById('reset-btn'),
    
    // –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
    exportDataBtn: document.getElementById('export-data-btn'),
    importDataBtn: document.getElementById('import-data-btn'),
    importDataInput: document.getElementById('import-data-input'),
    
    // –ì–æ–¥
    addYearBtn: document.getElementById('add-year-btn'),
    yearsList: document.getElementById('years-list'),
    
    // –û—Ç—á–µ—Ç—ã
    avgIncome: document.getElementById('avg-income'),
    avgExpense: document.getElementById('avg-expense'),
    bestMonth: document.getElementById('best-month'),
    totalIncome: document.getElementById('total-income'),
    totalExpense: document.getElementById('total-expense'),
    topCategoriesList: document.getElementById('top-categories-list'),
    
    // –ò—Å—Ç–æ—Ä–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    historyList: document.getElementById('history-list'),
    achievementsList: document.getElementById('achievements-list'),
    
    // –ú–µ—Å—è—Ü—ã
    monthTabs: document.querySelectorAll('.month-tab'),
    
    // –§–æ–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    fullscreenBackdrop: document.getElementById('fullscreen-backdrop')
  };
  
  console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã DOM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================

function initializeEventListeners() {
  console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  elements.addIncomeBtn.addEventListener('click', addIncome);
  elements.incomeInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') addIncome();
  });
  
  // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
  elements.categoryBtn.addEventListener('click', toggleCategoryMenu);
  elements.capitalizationBtn.addEventListener('click', toggleCapitalizationMenu);
  elements.settingsBtn.addEventListener('click', toggleReportsMenu);
  elements.themeToggleBtn.addEventListener('click', toggleTheme);
  elements.moreBtn.addEventListener('click', toggleMoreMenu);
  
  // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  elements.closeCategoryWidget.addEventListener('click', closeAllMenus);
  elements.closeReportsBtn.addEventListener('click', closeAllMenus);
  elements.closeHistory.addEventListener('click', closeAllMenus);
  elements.closeAchievements.addEventListener('click', closeAllMenus);
  elements.closeYearSelect.addEventListener('click', closeAllMenus);
  elements.closeTransferData.addEventListener('click', closeAllMenus);
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  elements.addCategoryBtn.addEventListener('click', addCategory);
  elements.newCategoryInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') addCategory();
  });
  
  // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
  elements.saveCapitalBtn.addEventListener('click', saveCapital);
  elements.cancelCapitalBtn.addEventListener('click', closeAllMenus);
  
  // –ë—é–¥–∂–µ—Ç
  elements.budgetSettingsBtn.addEventListener('click', toggleBudgetModal);
  elements.saveBudgetBtn.addEventListener('click', saveBudget);
  elements.cancelBudgetBtn.addEventListener('click', closeBudgetModal);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é
  elements.enableSavingsBtn.addEventListener('click', showSavingsModal);
  elements.enableFundBtn.addEventListener('click', showFundModal);
  elements.yearSelectBtn.addEventListener('click', showYearSelectModal);
  elements.historyBtn.addEventListener('click', showHistoryModal);
  elements.achievementsBtn.addEventListener('click', showAchievementsModal);
  elements.transferDataBtn.addEventListener('click', showTransferDataModal);
  elements.resetBtn.addEventListener('click', showResetModal);
  
  // –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
  elements.exportDataBtn.addEventListener('click', exportData);
  elements.importDataBtn.addEventListener('click', importData);
  
  // –ì–æ–¥
  elements.addYearBtn.addEventListener('click', addNewYear);
  
  // –ú–µ—Å—è—Ü—ã
  elements.monthTabs.forEach(tab => {
    tab.addEventListener('click', function() {
      switchMonth(parseInt(this.dataset.month));
    });
  });
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
  document.addEventListener('click', function(event) {
    if (!event.target.closest('.header-buttons') && 
        !event.target.closest('.neumorphic-menu') &&
        !event.target.closest('.category-widget') &&
        !event.target.closest('.neumorphic-btn')) {
      closeAllMenus();
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ü–æ–¥–∑–µ–º–µ–ª—å–µ –∏ –¥—Ä–∞–∫–æ–Ω—ã"
  const scrollable = document.getElementById('scrollable');
  let lastScrollPosition = 0;
  
  if (scrollable) {
    scrollable.addEventListener('scroll', () => {
      const currentScroll = scrollable.scrollTop;
      if (currentScroll <= 0 && lastScrollPosition <= 0) {
        pullAttempts++;
        if (pullAttempts >= 3) {
          unlockAchievement('dungeons_and_dragons');
          pullAttempts = 0;
        }
      } else {
        pullAttempts = 0;
      }
      lastScrollPosition = currentScroll;
    });
  }
  
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ ====================

function toggleCategoryMenu() {
  closeAllMenus();
  elements.categoryMenu.style.display = 'block';
  updateCategoriesList();
}

function toggleCapitalizationMenu() {
  closeAllMenus();
  elements.capitalizationMenu.style.display = 'block';
  elements.capitalInput.value = financeData[currentYear][currentMonth].capital || '';
}

function toggleReportsMenu() {
  closeAllMenus();
  elements.settingsMenu.style.display = 'block';
  elements.fullscreenBackdrop.style.display = 'block';
  updateFinancialReports();
  renderMiniCharts();
}

function toggleMoreMenu() {
  closeAllMenus();
  elements.moreMenu.style.display = 'block';
}

function toggleTheme() {
  document.body.classList.toggle('dark');
  const isDark = document.body.classList.contains('dark');
  localStorage.setItem('theme', isDark ? 'dark' : 'light');
  
  const themeIcon = elements.themeToggleBtn.querySelector('.theme-icon');
  if (themeIcon) {
    themeIcon.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Ghost busters
  const now = Date.now();
  if (now - lastThemeToggleTime < 2000) {
    themeToggleCount++;
    if (themeToggleCount >= 5) {
      unlockAchievement('ghost_busters');
      showGhostAnimation();
      themeToggleCount = 0;
    }
  } else {
    themeToggleCount = 1;
  }
  lastThemeToggleTime = now;
}

function closeAllMenus() {
  const menus = [
    elements.categoryMenu,
    elements.capitalizationMenu,
    elements.settingsMenu,
    elements.moreMenu,
    elements.savingsModal,
    elements.fundModal,
    elements.historyModal,
    elements.achievementsModal,
    elements.yearSelectModal,
    elements.transferDataModal,
    elements.setBudgetModal
  ];
  
  menus.forEach(menu => {
    if (menu) menu.style.display = 'none';
  });
  
  if (elements.fullscreenBackdrop) {
    elements.fullscreenBackdrop.style.display = 'none';
  }
}

function showSavingsModal() {
  closeAllMenus();
  createNewSavingsWidget();
}

function showFundModal() {
  closeAllMenus();
  createNewFundWidget();
}

function showHistoryModal() {
  closeAllMenus();
  elements.historyModal.style.display = 'block';
  elements.fullscreenBackdrop.style.display = 'block';
  renderExpenseHistory();
}

function showAchievementsModal() {
  closeAllMenus();
  elements.achievementsModal.style.display = 'block';
  elements.fullscreenBackdrop.style.display = 'block';
  renderAchievementsList();
}

function showYearSelectModal() {
  closeAllMenus();
  elements.yearSelectModal.style.display = 'block';
  renderYearSelection();
}

function showTransferDataModal() {
  closeAllMenus();
  elements.transferDataModal.style.display = 'block';
}

function toggleBudgetModal() {
  closeAllMenus();
  elements.setBudgetModal.style.display = 'block';
  elements.budgetAmount.value = budgetData.totalAmount || '';
  elements.budgetDays.value = budgetData.days || '';
}

function closeBudgetModal() {
  elements.setBudgetModal.style.display = 'none';
}

// ==================== –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ====================

function addIncome() {
  const amount = parseFloat(elements.incomeInput.value);
  if (!isNaN(amount) && amount > 0) {
    financeData[currentYear][currentMonth].income += amount;
    elements.incomeInput.value = '';
    updateUI();
    markDataChanged();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    elements.addIncomeBtn.classList.add('pulse');
    setTimeout(() => elements.addIncomeBtn.classList.remove('pulse'), 500);
  }
}

function addCategory() {
  const categoryName = elements.newCategoryInput.value.trim();
  if (categoryName) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ –≤—Å–µ –º–µ—Å—è—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    for (let i = 0; i < 12; i++) {
      if (!financeData[currentYear][i].categories[categoryName]) {
        financeData[currentYear][i].categories[categoryName] = 0;
      }
    }
    
    elements.newCategoryInput.value = '';
    updateUI();
    markDataChanged();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements();
  }
}

function saveCapital() {
  const amount = parseFloat(elements.capitalInput.value);
  if (!isNaN(amount)) {
    financeData[currentYear][currentMonth].capital = amount;
    updateUI();
    closeAllMenus();
    markDataChanged();
  }
}

function saveBudget() {
  const amount = parseFloat(elements.budgetAmount.value);
  const days = parseInt(elements.budgetDays.value);
  
  if (!isNaN(amount) && !isNaN(days) && days > 0) {
    const today = new Date();
    budgetData = {
      totalAmount: amount,
      days: days,
      startDate: today.toISOString(),
      spent: 0,
      dailyHistory: {
        [today.toISOString().split('T')[0]]: {
          date: today.toISOString().split('T')[0],
          dailyBudget: amount / days,
          spentToday: 0
        }
      }
    };
    
    closeBudgetModal();
    updateUI();
    markDataChanged();
    showSuccessMessage('–ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  }
}

function switchMonth(month) {
  currentMonth = month;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–î–æ —Ä–µ –º–∏"
  monthSequence.push(month);
  if (monthSequence.length > requiredMonthSequence.length) {
    monthSequence.shift();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç—Ä–µ–±—É–µ–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  if (monthSequence.length === requiredMonthSequence.length) {
    let match = true;
    for (let i = 0; i < requiredMonthSequence.length; i++) {
      if (monthSequence[i] !== requiredMonthSequence[i]) {
        match = false;
        break;
      }
    }
    if (match) {
      unlockAchievement('do_re_mi');
      monthSequence = [];
    }
  }
  
  updateUI();
}

// ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê ====================

function updateUI() {
  const monthData = financeData[currentYear][currentMonth];
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
  elements.incomeDisplay.textContent = formatCurrency(monthData.income);
  elements.expenseDisplay.textContent = formatCurrency(monthData.expense);
  elements.capitalDisplay.textContent = formatCurrency(monthData.capital || 0);
  elements.currentYearDisplay.textContent = `–ì–æ–¥: ${currentYear}`;
  
  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞
  const remaining = monthData.income - monthData.expense;
  const percentage = monthData.income > 0 ? Math.round((remaining / monthData.income) * 100) : 0;
  elements.percentDisplay.textContent = (remaining < 0 ? '-' : '') + Math.abs(percentage) + '%';
  
  if (remaining < 0) {
    elements.percentDisplay.classList.add('negative');
    elements.percentDisplay.style.color = '#e74c3c';
  } else {
    elements.percentDisplay.classList.remove('negative');
    elements.percentDisplay.style.color = percentage < 20 ? '#f39c12' : '#2ecc71';
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
  elements.monthTabs.forEach(tab => {
    const month = parseInt(tab.dataset.month);
    tab.classList.toggle('active', month === currentMonth);
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤
  updateCategoriesList();
  renderWidgets();
  updateBudgetWidget();
  updateFinancialReports();
  renderAllCharts();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  checkAchievements();
}

function updateCategoriesList() {
  if (!elements.categoriesList) return;
  
  elements.categoriesList.innerHTML = '';
  const categories = financeData[currentYear][currentMonth].categories;
  
  Object.keys(categories).forEach((category, index) => {
    const categoryItem = document.createElement('div');
    categoryItem.className = 'category-item';
    categoryItem.innerHTML = `
      <span style="color: ${categoryColors[index % categoryColors.length]}">‚ñ†</span> ${category}
      <span>${formatCurrency(categories[category])}</span>
      <button class="delete-category-btn" data-category="${category}">√ó</button>
    `;
    elements.categoriesList.appendChild(categoryItem);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  document.querySelectorAll('.delete-category-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const category = this.getAttribute('data-category');
      if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"?`)) {
        deleteCategory(category);
      }
    });
  });
}

function deleteCategory(category) {
  const monthData = financeData[currentYear][currentMonth];
  const categoryExpense = monthData.categories[category] || 0;
  
  monthData.expense -= categoryExpense;
  delete monthData.categories[category];
  
  updateUI();
  markDataChanged();
}

// ==================== –í–ò–î–ñ–ï–¢–´ ====================

function renderWidgets() {
  if (!elements.widgetsContainer) return;
  
  elements.widgetsContainer.innerHTML = '';
  const monthData = financeData[currentYear][currentMonth];
  const categories = monthData.categories;
  
  // –í–∏–¥–∂–µ—Ç—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  savingsWidgets.forEach(widget => {
    const widgetElement = createSavingsWidget(widget);
    elements.widgetsContainer.appendChild(widgetElement);
  });
  
  // –í–∏–¥–∂–µ—Ç—ã —Ñ–æ–Ω–¥–æ–≤
  fundWidgets.forEach(widget => {
    const widgetElement = createFundWidget(widget);
    elements.widgetsContainer.appendChild(widgetElement);
  });
  
  // –í–∏–¥–∂–µ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
  Object.entries(categories).forEach(([category, amount], index) => {
    const widget = createCategoryWidget(category, amount, index);
    elements.widgetsContainer.appendChild(widget);
  });
}

function createSavingsWidget(widget) {
  const widgetElement = document.createElement('div');
  widgetElement.className = 'neumorphic-card widget savings-widget';
  widgetElement.dataset.widgetId = widget.id;
  
  const progress = widget.goal > 0 ? Math.min(100, Math.round((widget.current / widget.goal) * 100)) : 0;
  
  widgetElement.innerHTML = `
    <button class="delete-widget-btn" data-widget-id="${widget.id}">√ó</button>
    <h3 style="color: #2ecc71">${widget.name}</h3>
    <div class="savings-progress-container">
      <div class="savings-progress-bar" style="width: ${progress}%"></div>
    </div>
    <p>${formatCurrency(widget.current)} / ${formatCurrency(widget.goal)} (${progress}%)</p>
    <div class="widget-input-group">
      <input type="number" class="neumorphic-input widget-input savings-amount" 
            placeholder="–°—É–º–º–∞" data-widget-id="${widget.id}">
      <button class="neumorphic-btn small add-savings-btn" 
              data-widget-id="${widget.id}">+</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
  widgetElement.querySelector('.add-savings-btn').addEventListener('click', addToSavings);
  widgetElement.querySelector('.delete-widget-btn').addEventListener('click', deleteSavingsWidget);
  
  return widgetElement;
}

function createFundWidget(widget) {
  const widgetElement = document.createElement('div');
  widgetElement.className = 'neumorphic-card widget fund-widget';
  widgetElement.dataset.widgetId = widget.id;
  
  const spent = widget.initialAmount - widget.current;
  const progress = widget.initialAmount > 0 ? Math.min(100, Math.round((spent / widget.initialAmount) * 100)) : 0;
  
  widgetElement.innerHTML = `
    <button class="delete-widget-btn" data-widget-id="${widget.id}">√ó</button>
    <h3 style="color: #e67e22">${widget.name}</h3>
    <div class="savings-progress-container">
      <div class="savings-progress-bar" style="width: ${progress}%"></div>
    </div>
    <p>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${formatCurrency(spent)} / ${formatCurrency(widget.initialAmount)} (${progress}%)</p>
    <p>–û—Å—Ç–∞—Ç–æ–∫: ${formatCurrency(widget.current)}</p>
    <div class="widget-input-group">
      <input type="number" class="neumorphic-input widget-input fund-amount" 
            placeholder="–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞" data-widget-id="${widget.id}">
      <button class="neumorphic-btn small add-fund-btn" 
              data-widget-id="${widget.id}">-</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ —Ñ–æ–Ω–¥–æ–≤
  widgetElement.querySelector('.add-fund-btn').addEventListener('click', subtractFromFund);
  widgetElement.querySelector('.delete-widget-btn').addEventListener('click', deleteFundWidget);
  
  return widgetElement;
}

function createCategoryWidget(category, amount, index) {
  const widget = document.createElement('div');
  widget.className = 'neumorphic-card widget';
  const color = categoryColors[index % categoryColors.length];
  
  widget.innerHTML = `
    <div class="widget-header">
      <h3 style="color: ${color}">${category}</h3>
      <div class="widget-actions">
        <button class="delete-widget-btn" data-category="${category}">√ó</button>
      </div>
    </div>
    <p>${formatCurrency(amount)}</p>
    <div class="widget-input-group">
      <input type="number" class="neumorphic-input widget-input" placeholder="–°—É–º–º–∞" id="expense-${category}">
      <button class="neumorphic-btn small" data-category="${category}">+</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  widget.addEventListener('click', function() {
    widgetClickCount++;
    if (widgetClickCount >= 15) {
      triggerFallAnimation();
      widgetClickCount = 0;
    }
  });
  
  widget.querySelector('.neumorphic-btn.small').addEventListener('click', function() {
    const category = this.getAttribute('data-category');
    addExpenseToCategory(category);
  });
  
  widget.querySelector('.delete-widget-btn').addEventListener('click', function() {
    const category = this.getAttribute('data-category');
    deleteWidget(category);
  });
  
  return widget;
}

function addExpenseToCategory(category) {
  const input = document.getElementById(`expense-${category}`);
  const amount = parseFloat(input.value);
  
  if (!isNaN(amount) && amount > 0) {
    const monthData = financeData[currentYear][currentMonth];
    
    monthData.expense += amount;
    monthData.categories[category] = (monthData.categories[category] || 0) + amount;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    monthData.expensesHistory.push({
      category: category,
      amount: amount,
      date: new Date().toLocaleString()
    });
    
    input.value = '';
    updateUI();
    markDataChanged();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    const btn = input.nextElementSibling;
    btn.classList.add('pulse');
    setTimeout(() => btn.classList.remove('pulse'), 500);
  }
}

function deleteWidget(category) {
  if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"?`)) {
    const monthData = financeData[currentYear][currentMonth];
    const categoryExpense = monthData.categories[category] || 0;
    
    monthData.expense -= categoryExpense;
    delete monthData.categories[category];
    
    updateUI();
    markDataChanged();
  }
}

// ==================== –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –ò –§–û–ù–î–´ ====================

function createNewSavingsWidget() {
  const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:');
  if (!name) return;
  
  const goal = parseFloat(prompt('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É:'));
  if (isNaN(goal) || goal <= 0) return;
  
  const widgetId = Date.now().toString();
  const newWidget = {
    id: widgetId,
    name: name,
    goal: goal,
    current: 0,
    color: '#2ecc71'
  };
  
  savingsWidgets.push(newWidget);
  markDataChanged();
  updateUI();
  showSuccessMessage('–¶–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞!');
}

function createNewFundWidget() {
  const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞:');
  if (!name) return;
  
  const amount = parseFloat(prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ñ–æ–Ω–¥–∞:'));
  if (isNaN(amount) || amount <= 0) return;
  
  const widgetId = Date.now().toString();
  const newWidget = {
    id: widgetId,
    name: name,
    initialAmount: amount,
    current: amount,
    color: '#e67e22'
  };
  
  fundWidgets.push(newWidget);
  markDataChanged();
  updateUI();
  showSuccessMessage('–§–æ–Ω–¥ —Å–æ–∑–¥–∞–Ω!');
}

function addToSavings() {
  const widgetId = this.dataset.widgetId;
  const input = document.querySelector(`.savings-amount[data-widget-id="${widgetId}"]`);
  const amount = parseFloat(input.value);
  
  if (!isNaN(amount) && amount > 0) {
    const widgetIndex = savingsWidgets.findIndex(w => w.id === widgetId);
    if (widgetIndex !== -1) {
      savingsWidgets[widgetIndex].current += amount;
      markDataChanged();
      updateUI();
      input.value = '';
    }
  }
}

function subtractFromFund() {
  const widgetId = this.dataset.widgetId;
  const input = document.querySelector(`.fund-amount[data-widget-id="${widgetId}"]`);
  const amount = parseFloat(input.value);
  
  if (!isNaN(amount) && amount > 0) {
    const widgetIndex = fundWidgets.findIndex(w => w.id === widgetId);
    if (widgetIndex !== -1 && fundWidgets[widgetIndex].current >= amount) {
      fundWidgets[widgetIndex].current -= amount;
      markDataChanged();
      updateUI();
      input.value = '';
    } else if (widgetIndex !== -1) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ñ–æ–Ω–¥–µ!');
    }
  }
}

function deleteSavingsWidget() {
  const widgetId = this.dataset.widgetId;
  if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–∏–¥–∂–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π?')) {
    savingsWidgets = savingsWidgets.filter(w => w.id !== widgetId);
    markDataChanged();
    updateUI();
  }
}

function deleteFundWidget() {
  const widgetId = this.dataset.widgetId;
  if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–æ–Ω–¥?')) {
    fundWidgets = fundWidgets.filter(w => w.id !== widgetId);
    markDataChanged();
    updateUI();
  }
}

// ==================== –ë–Æ–î–ñ–ï–¢ ====================

function updateBudgetWidget() {
  if (!budgetData.startDate) {
    elements.dailyBudgetAmount.textContent = formatCurrency(0);
    elements.budgetProgress.textContent = '–ù–µ –∑–∞–¥–∞–Ω–æ';
    if (elements.daysProgressBar) elements.daysProgressBar.style.width = '100%';
    if (elements.fundsProgressBar) elements.fundsProgressBar.style.width = '100%';
    if (elements.daysProgressValue) elements.daysProgressValue.textContent = '100%';
    if (elements.fundsProgressValue) elements.fundsProgressValue.textContent = '100%';
    return;
  }

  const today = new Date();
  const startDate = new Date(budgetData.startDate);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –±—é–¥–∂–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  const elapsedDays = Math.floor((today - startDate) / (1000 * 60 * 60 * 24)) + 1;
  const remainingDays = Math.max(0, budgetData.days - elapsedDays + 1);
  
  if (remainingDays <= 0) {
    elements.dailyBudgetAmount.textContent = formatCurrency(0);
    elements.budgetProgress.textContent = '–°—Ä–æ–∫ –∏—Å—Ç–µ–∫';
    if (elements.daysProgressBar) elements.daysProgressBar.style.width = '0%';
    if (elements.fundsProgressBar) elements.fundsProgressBar.style.width = '0%';
    if (elements.daysProgressValue) elements.daysProgressValue.textContent = '0%';
    if (elements.fundsProgressValue) elements.fundsProgressValue.textContent = '0%';
    return;
  }

  const dailyBudget = budgetData.totalAmount / budgetData.days;
  
  elements.dailyBudgetAmount.textContent = formatCurrency(dailyBudget);
  elements.budgetProgress.textContent = `–û—Å—Ç–∞–ª–æ—Å—å: ${remainingDays} –¥–Ω.`;
  
  const daysProgress = (elapsedDays / budgetData.days) * 100;
  const fundsProgress = (financeData[currentYear][currentMonth].expense / budgetData.totalAmount) * 100;
  
  if (elements.daysProgressBar) elements.daysProgressBar.style.width = `${Math.min(daysProgress, 100)}%`;
  if (elements.fundsProgressBar) elements.fundsProgressBar.style.width = `${Math.min(fundsProgress, 100)}%`;
  if (elements.daysProgressValue) elements.daysProgressValue.textContent = `${Math.round(Math.min(daysProgress, 100))}%`;
  if (elements.fundsProgressValue) elements.fundsProgressValue.textContent = `${Math.round(Math.min(fundsProgress, 100))}%`;
}

// ==================== –û–¢–ß–ï–¢–´ –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================

function updateFinancialReports() {
  let totalIncome = 0;
  let totalExpense = 0;
  let bestMonthValue = 0;
  let bestMonthName = '';
  
  for (let i = 0; i < 12; i++) {
    const monthData = financeData[currentYear][i] || { income: 0, expense: 0 };
    totalIncome += monthData.income || 0;
    totalExpense += monthData.expense || 0;
    
    if (monthData.income > bestMonthValue) {
      bestMonthValue = monthData.income;
      bestMonthName = monthNames[i];
    }
  }
  
  elements.avgIncome.textContent = formatCurrency(Math.round(totalIncome / 12));
  elements.avgExpense.textContent = formatCurrency(Math.round(totalExpense / 12));
  elements.totalIncome.textContent = formatCurrency(totalIncome);
  elements.totalExpense.textContent = formatCurrency(totalExpense);
  
  if (bestMonthName) {
    elements.bestMonth.textContent = `${bestMonthName}\n+${formatCurrency(bestMonthValue)}`;
  } else {
    elements.bestMonth.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }
  
  renderTopCategoriesReport();
}

function renderTopCategoriesReport() {
  if (!elements.topCategoriesList) return;
  
  elements.topCategoriesList.innerHTML = '';
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –≥–æ–¥
  const categoryTotals = {};
  
  for (let month = 0; month < 12; month++) {
    const categories = financeData[currentYear][month].categories;
    for (const [category, amount] of Object.entries(categories)) {
      categoryTotals[category] = (categoryTotals[category] || 0) + amount;
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –±–µ—Ä–µ–º —Ç–æ–ø-5
  const topCategories = Object.entries(categoryTotals)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5);
  
  topCategories.forEach(([category, amount], index) => {
    const categoryElement = document.createElement('div');
    categoryElement.className = 'category-item';
    categoryElement.innerHTML = `
      <div style="display: flex; align-items: center; gap: 8px;">
        <span style="color: ${categoryColors[index % categoryColors.length]}; font-weight: bold;">‚ñ†</span>
        <span>${category}</span>
      </div>
      <div style="text-align: right;">
        <div>${formatCurrency(amount)}</div>
      </div>
    `;
    elements.topCategoriesList.appendChild(categoryElement);
  });
}

// ==================== –ì–†–ê–§–ò–ö–ò ====================

function renderAllCharts() {
  renderChart();
  renderCapitalChart();
  renderMiniCharts();
}

function renderChart() {
  const ctx = document.getElementById('barChart')?.getContext('2d');
  if (!ctx) return;
  
  if (chart) chart.destroy();

  const monthData = financeData[currentYear][currentMonth];
  const categoryNames = Object.keys(monthData.categories);
  const values = Object.values(monthData.categories);

  chart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: categoryNames,
      datasets: [{
        label: '–†–∞—Å—Ö–æ–¥—ã',
        data: values,
        backgroundColor: categoryNames.map((_, index) => categoryColors[index % categoryColors.length]),
        borderColor: 'transparent',
        borderWidth: 0,
        borderRadius: 6,
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false }
      },
      scales: {
        y: {
          beginAtZero: true,
          grid: {
            color: 'rgba(0,0,0,0.05)',
          }
        },
        x: {
          grid: { display: false }
        }
      }
    }
  });
}

function renderCapitalChart() {
  const ctx = document.getElementById('capitalChart')?.getContext('2d');
  if (!ctx) return;
  
  if (capitalChart) capitalChart.destroy();

  const monthData = financeData[currentYear][currentMonth];
  const capitalValue = monthData.capital || 0;

  capitalChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: ['–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è'],
      datasets: [{
        label: '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
        data: [capitalValue],
        backgroundColor: 'rgba(52, 152, 219, 0.2)',
        borderColor: '#3498db',
        borderWidth: 3,
        tension: 0.3,
        fill: true,
        pointBackgroundColor: '#fff',
        pointBorderColor: '#3498db',
        pointRadius: 6,
        pointHoverRadius: 8,
        pointBorderWidth: 2
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false }
      },
      scales: {
        y: { beginAtZero: true }
      }
    }
  });
}

function renderMiniCharts() {
  const labels = monthNames.map(name => name.substring(0, 3));
  const capitalData = [];
  const expenseData = [];
  
  for (let i = 0; i < 12; i++) {
    const monthData = financeData[currentYear][i] || { income: 0, expense: 0, capital: 0 };
    capitalData.push(monthData.capital);
    expenseData.push(monthData.expense);
  }
  
  // –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  if (miniCapitalChart) miniCapitalChart.destroy();
  const capitalCtx = document.getElementById('miniCapitalChart')?.getContext('2d');
  if (capitalCtx) {
    miniCapitalChart = new Chart(capitalCtx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          data: capitalData,
          borderColor: '#3498db',
          backgroundColor: 'rgba(52, 152, 219, 0.1)',
          borderWidth: 3,
          tension: 0.3,
          fill: true,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { legend: { display: false } },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  }
  
  // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
  if (miniExpenseChart) miniExpenseChart.destroy();
  const expenseCtx = document.getElementById('miniExpenseChart')?.getContext('2d');
  if (expenseCtx) {
    miniExpenseChart = new Chart(expenseCtx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          data: expenseData,
          backgroundColor: 'rgba(231, 76, 60, 0.8)',
          borderColor: 'transparent',
          borderWidth: 0,
          borderRadius: 4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { legend: { display: false } },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  }
}

// ==================== –ò–°–¢–û–†–ò–Ø ====================

function renderExpenseHistory() {
  if (!elements.historyList) return;
  
  elements.historyList.innerHTML = '';
  const monthData = financeData[currentYear][currentMonth];
  const history = monthData.expensesHistory || [];
  
  if (history.length === 0) {
    elements.historyList.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç –ø—É—Å—Ç–∞</p>';
    return;
  }
  
  const sortedHistory = [...history].reverse();
  
  sortedHistory.forEach((item, index) => {
    const historyItem = document.createElement('div');
    historyItem.className = 'history-item';
    historyItem.innerHTML = `
      <div class="history-content">
        <div class="history-category">${item.category}</div>
        <div class="history-amount">${formatCurrency(item.amount)}</div>
        <div class="history-date">${item.date}</div>
      </div>
      <button class="delete-history-btn" data-index="${history.length - 1 - index}">√ó</button>
    `;
    elements.historyList.appendChild(historyItem);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
  document.querySelectorAll('.delete-history-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const index = parseInt(this.getAttribute('data-index'));
      deleteExpenseFromHistory(index);
    });
  });
}

function deleteExpenseFromHistory(index) {
  const monthData = financeData[currentYear][currentMonth];
  const expense = monthData.expensesHistory[index];
  
  if (expense) {
    monthData.expense -= expense.amount;
    
    if (monthData.categories[expense.category]) {
      monthData.categories[expense.category] -= expense.amount;
      
      if (monthData.categories[expense.category] <= 0) {
        delete monthData.categories[expense.category];
      }
    }
    
    monthData.expensesHistory.splice(index, 1);
    
    updateUI();
    markDataChanged();
    
    showSuccessMessage(`–¢—Ä–∞—Ç–∞ "${expense.category}" —É–¥–∞–ª–µ–Ω–∞`);
  }
}

// ==================== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ====================

function checkAchievements() {
  const monthData = financeData[currentYear][currentMonth];
  const data = {
    income: monthData.income,
    expense: monthData.expense,
    capital: monthData.capital,
    categories: monthData.categories,
    savingsWidgets: savingsWidgets,
    fundWidgets: fundWidgets,
    expensesHistory: monthData.expensesHistory
  };

  achievements.forEach(ach => {
    if (!achievementsData[ach.id] && ach.check(data)) {
      unlockAchievement(ach.id);
    }
  });
}

function unlockAchievement(id) {
  if (!achievementsData[id]) {
    achievementsData[id] = true;
    markDataChanged();
    const achievement = achievements.find(a => a.id === id);
    if (achievement) showAchievementUnlocked(achievement);
  }
}

function showAchievementUnlocked(achievement) {
  const notification = document.createElement('div');
  notification.className = 'achievement-notification';
  notification.style.cssText = `
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    z-index: 10000;
    text-align: center;
    max-width: 300px;
    width: 90%;
  `;
  notification.innerHTML = `
    <div style="font-size: 2rem; margin-bottom: 10px;">${achievement.emoji}</div>
    <h4 style="margin: 0 0 8px 0; font-size: 1.1rem;">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</h4>
    <h3 style="margin: 0 0 8px 0; font-size: 1.3rem;">${achievement.title}</h3>
    <p style="margin: 0; opacity: 0.9;">${achievement.description}</p>
  `;
  document.body.appendChild(notification);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    notification.style.opacity = '1';
    notification.style.transform = 'translateX(-50%) translateY(0)';
  }, 100);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(-50%) translateY(20px)';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 5000);
}

function renderAchievementsList() {
  if (!elements.achievementsList) return;
  
  elements.achievementsList.innerHTML = '';
  
  achievements.forEach(ach => {
    const unlocked = achievementsData[ach.id];
    
    const achievementEl = document.createElement('div');
    achievementEl.className = `achievement-item ${unlocked ? 'unlocked' : 'locked'}`;
    achievementEl.style.cssText = `
      display: flex;
      align-items: center;
      padding: 15px;
      margin: 10px 0;
      border-radius: 10px;
      background: ${unlocked ? 'rgba(46, 204, 113, 0.1)' : 'rgba(0,0,0,0.05)'};
      border-left: 4px solid ${unlocked ? '#2ecc71' : '#ccc'};
    `;
    
    const description = (ach.secret && !unlocked) ? '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ' : ach.description;
    
    achievementEl.innerHTML = `
      <div style="font-size: 2rem; margin-right: 15px;">${unlocked ? ach.emoji : 'üîí'}</div>
      <div style="flex: 1;">
        <h4 style="margin: 0 0 5px 0; color: ${unlocked ? '#2c3e50' : '#95a5a6'}">${ach.title}</h4>
        <p style="margin: 0; color: ${unlocked ? '#7f8c8d' : '#bdc3c7'}">${description}</p>
      </div>
    `;
    
    elements.achievementsList.appendChild(achievementEl);
  });
}

// ==================== –†–ê–ë–û–¢–ê –° –ì–û–î–ê–ú–ò ====================

function renderYearSelection() {
  if (!elements.yearsList) return;
  
  elements.yearsList.innerHTML = '';
  
  const years = Object.keys(financeData).sort((a, b) => b - a);
  
  years.forEach(year => {
    const yearBtn = document.createElement('button');
    yearBtn.className = 'year-btn';
    yearBtn.style.cssText = `
      display: block;
      width: 100%;
      padding: 12px;
      margin: 5px 0;
      border: none;
      border-radius: 8px;
      background: var(--bg);
      color: var(--text);
      cursor: pointer;
      font-size: 1.1rem;
      text-align: center;
    `;
    yearBtn.textContent = year;
    yearBtn.addEventListener('click', () => {
      currentYear = parseInt(year);
      elements.yearSelectModal.style.display = 'none';
      updateUI();
    });
    elements.yearsList.appendChild(yearBtn);
  });
}

function addNewYear() {
  const newYear = currentYear + 1;
  if (!financeData[newYear]) {
    initYearData(newYear);
    markDataChanged();
    renderYearSelection();
    showSuccessMessage(`–ì–æ–¥ ${newYear} –¥–æ–±–∞–≤–ª–µ–Ω!`);
  } else {
    showSuccessMessage(`–ì–æ–¥ ${newYear} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
  }
}

// ==================== –ü–ï–†–ï–ù–û–° –î–ê–ù–ù–´–• ====================

function exportData() {
  const dataToExport = {
    financeData: financeData,
    budgetData: budgetData,
    savingsWidgets: savingsWidgets,
    fundWidgets: fundWidgets,
    achievementsData: achievementsData,
    exportDate: new Date().toISOString()
  };
  
  const dataStr = JSON.stringify(dataToExport, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  
  // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const url = URL.createObjectURL(dataBlob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `finance-backup-${new Date().toISOString().split('T')[0]}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
  
  showSuccessMessage('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
}

function importData() {
  const importDataStr = elements.importDataInput.value.trim();
  if (!importDataStr) {
    alert('–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    return;
  }

  try {
    const importedData = JSON.parse(importDataStr);
    
    if (importedData.financeData) {
      financeData = importedData.financeData;
      budgetData = importedData.budgetData || budgetData;
      savingsWidgets = importedData.savingsWidgets || savingsWidgets;
      fundWidgets = importedData.fundWidgets || fundWidgets;
      achievementsData = importedData.achievementsData || achievementsData;
      
      markDataChanged();
      updateUI();
      elements.importDataInput.value = '';
      elements.transferDataModal.style.display = 'none';
      showSuccessMessage('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
    } else {
      alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ', e);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
  }
}

// ==================== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ ====================

function triggerFallAnimation() {
  const style = document.createElement('style');
  style.textContent = `
    @keyframes fallDown {
      0% { transform: translateY(0) rotate(0deg); opacity: 1; }
      100% { transform: translateY(100vh) rotate(var(--rotation)); opacity: 0; }
    }
    .falling {
      animation: fallDown 2s ease forwards;
      pointer-events: none;
    }
  `;
  document.head.appendChild(style);

  const allElements = document.querySelectorAll('body > *:not(script):not(style)');
  allElements.forEach(element => {
    if (!element.classList.contains('falling')) {
      const rotation = (Math.random() * 360) - 180;
      const delay = Math.random() * 0.5;
      const duration = 1 + Math.random() * 1;
      
      element.style.setProperty('--rotation', `${rotation}deg`);
      element.style.animationDelay = `${delay}s`;
      element.style.animationDuration = `${duration}s`;
      element.classList.add('falling');
    }
  });

  setTimeout(() => {
    allElements.forEach(element => {
      element.classList.remove('falling');
      element.style.animation = 'none';
      element.style.transform = 'none';
      element.style.opacity = '1';
    });
    document.head.removeChild(style);
  }, 5000);
}

function showGhostAnimation() {
  const ghosts = ['üëª', 'üëª', 'üëª', 'üëª', 'üëª'];
  const container = document.createElement('div');
  container.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 9999;
    overflow: hidden;
  `;
  document.body.appendChild(container);

  ghosts.forEach((ghost, i) => {
    const ghostEl = document.createElement('div');
    ghostEl.textContent = ghost;
    ghostEl.style.cssText = `
      position: absolute;
      font-size: 30px;
      left: ${Math.random() * 100}%;
      top: -50px;
      animation: ghostFall ${3 + Math.random() * 2}s linear ${i * 0.1}s forwards;
    `;
    container.appendChild(ghostEl);
  });

  const style = document.createElement('style');
  style.textContent = `
    @keyframes ghostFall {
      to { transform: translateY(calc(100vh + 50px)) rotate(${Math.random() * 360}deg); }
    }
  `;
  document.head.appendChild(style);

  setTimeout(() => {
    document.body.removeChild(container);
    document.head.removeChild(style);
  }, 5000);
}

// ==================== –°–ë–†–û–° –î–ê–ù–ù–´–• ====================

function showResetModal() {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
    return;
  }
  
  localStorage.clear();
  financeData = {};
  savingsWidgets = [];
  fundWidgets = [];
  achievementsData = {};
  budgetData = {
    totalAmount: 0,
    days: 0,
    startDate: null,
    spent: 0,
    dailyHistory: {}
  };
  
  initYearData(currentYear);
  
  showSuccessMessage('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!');
  updateUI();
}

// ==================== –ê–î–ê–ü–¢–ê–¶–ò–Ø –ö–ù–û–ü–û–ö ====================

function adaptHeaderButtons() {
  const headerButtons = document.querySelector('.header-buttons');
  if (!headerButtons) return;
  
  const buttons = headerButtons.querySelectorAll('.neumorphic-btn.small');
  const containerWidth = headerButtons.offsetWidth;
  
  let totalWidth = 0;
  buttons.forEach(btn => {
    totalWidth += btn.offsetWidth + 4;
  });
  
  if (totalWidth > containerWidth && window.innerWidth <= 767) {
    buttons.forEach(btn => {
      if (!btn.classList.contains('theme-toggle')) {
        btn.style.fontSize = '0.65rem';
        btn.style.padding = '6px 8px';
        btn.style.minWidth = '58px';
      }
    });
    
    if (window.innerWidth <= 360) {
      buttons.forEach(btn => {
        if (!btn.classList.contains('theme-toggle')) {
          btn.style.fontSize = '0.6rem';
          btn.style.padding = '5px 6px';
          btn.style.minWidth = '52px';
          btn.style.height = '28px';
        }
      });
      
      const themeBtn = document.querySelector('.theme-toggle');
      if (themeBtn) {
        themeBtn.style.minWidth = '30px';
        themeBtn.style.height = '28px';
        themeBtn.style.padding = '4px';
      }
    }
  } else {
    buttons.forEach(btn => {
      btn.style.fontSize = '';
      btn.style.padding = '';
      btn.style.minWidth = '';
      btn.style.height = '';
    });
  }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================

document.addEventListener('DOMContentLoaded', function() {
  console.log('=== –ó–ê–ì–†–£–ó–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
  initializeDOMElements();
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  loadData();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  initializeEventListeners();
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.body.classList.add('dark');
    const themeIcon = document.querySelector('.theme-icon');
    if (themeIcon) themeIcon.textContent = '‚òÄÔ∏è';
  }
  
  // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–õ—É—á—à–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞" –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  if (!achievementsData['better_than_most']) {
    unlockAchievement('better_than_most');
  }
  
  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
  updateUI();
  
  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
  setTimeout(adaptHeaderButtons, 100);
  
  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  window.addEventListener('beforeunload', function() {
    if (hasUnsavedChanges) {
      saveData();
    }
  });
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  setInterval(() => {
    if (hasUnsavedChanges) {
      saveData();
    }
  }, 30000);
  
  console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
});

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', adaptHeaderButtons);
